package com.dongnaebook.domain.diary;

import com.dongnaebook.domain.diary.DTO.DiaryDetailDTO;
import com.dongnaebook.domain.diary.DTO.DiaryRequestDTO;
import com.dongnaebook.domain.diary.DTO.DiaryResponseDTO;
import com.dongnaebook.domain.post.DTO.PostResponseDTO;
import com.dongnaebook.domain.post.Post;
import com.dongnaebook.domain.post.PostMapper;
import com.dongnaebook.domain.region.DTO.RegionResponseDTO;
import com.dongnaebook.domain.region.Region;
import com.dongnaebook.domain.region.RegionMapper;
import com.dongnaebook.domain.user.User;
import com.dongnaebook.domain.user.UserMapper;
import lombok.Getter;
import lombok.Setter;
import java.util.List;
import java.util.stream.Collectors;

@Getter
@Setter
public class DiaryMapper {
    public static Diary toEntity(DiaryRequestDTO diaryRequestDTO) {
        return Diary.builder()
                .title(diaryRequestDTO.getTitle())
                .content(diaryRequestDTO.getContent())
                .keywords(diaryRequestDTO.getKeywords())
                .isAutoGenerated(diaryRequestDTO.isAutoGenerated())
                .build();
    }

    public static DiaryResponseDTO toResponseDTO(Diary diary) {
        return DiaryResponseDTO.builder()
                .id(diary.getId())
                .title(diary.getTitle())
                .content(diary.getContent())
                .keywords(diary.getKeywords())
                .isAutoGenerated(diary.isAutoGenerated())
                .createdAt(diary.getCreatedAt())
                .createdBy(diary.getCreatedBy())
                .modifiedAt(diary.getModifiedAt())
                .modifiedBy(diary.getModifiedBy())
                .build();
    }

    public static DiaryDetailDTO toDetailResponse(Diary diary, User createdBy, User modifiedBy, List<Region> regions, List<Post> posts) {
        return DiaryDetailDTO.builder()
                .id(diary.getId())
                .title(diary.getTitle())
                .content(diary.getContent())
                .keywords(diary.getKeywords())
                .regions(regions.stream()
                        .map(RegionMapper::toResponseDTO)
                        .collect(Collectors.toList()))
                .posts(posts.stream()
                        .map(PostMapper::toResponseDto)
                        .collect(Collectors.toList()))
                .createdBy(UserMapper.toResponseDto(createdBy))
                .createdAt(diary.getCreatedAt())
                .modifiedBy(UserMapper.toResponseDto(modifiedBy))
                .modifiedAt(diary.getModifiedAt())
                .isAutoGenerated(diary.isAutoGenerated())
                .build();
    }
}
